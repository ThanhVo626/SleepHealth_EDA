{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "6a66fa0e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "def average_age_for_longest_sleep_duration(input_file):\n",
    "    # Read the CSV file into a pandas DataFrame\n",
    "    df = pd.read_csv(\"Sleep_health_and_lifestyle_dataset.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0ff33bf1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8.5\n"
     ]
    }
   ],
   "source": [
    "#determine the average age that coorelates with the longest sleep duration\n",
    "\n",
    "max_sleep_duration = df['Sleep Duration'].max()\n",
    "print(max_sleep_duration)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "25cb9b04",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     Person ID  Gender  Age Occupation  Sleep Duration  Quality of Sleep  \\\n",
      "298        299  Female   51   Engineer             8.5                 9   \n",
      "299        300  Female   51   Engineer             8.5                 9   \n",
      "300        301  Female   51   Engineer             8.5                 9   \n",
      "301        302  Female   51   Engineer             8.5                 9   \n",
      "316        317  Female   53   Engineer             8.5                 9   \n",
      "317        318  Female   53   Engineer             8.5                 9   \n",
      "320        321  Female   53   Engineer             8.5                 9   \n",
      "323        324  Female   53   Engineer             8.5                 9   \n",
      "325        326  Female   53   Engineer             8.5                 9   \n",
      "327        328  Female   53   Engineer             8.5                 9   \n",
      "329        330  Female   53   Engineer             8.5                 9   \n",
      "330        331  Female   53   Engineer             8.5                 9   \n",
      "338        339  Female   54   Engineer             8.5                 9   \n",
      "\n",
      "     Physical Activity Level  Stress Level BMI Category Blood Pressure  \\\n",
      "298                       30             3       Normal         125/80   \n",
      "299                       30             3       Normal         125/80   \n",
      "300                       30             3       Normal         125/80   \n",
      "301                       30             3       Normal         125/80   \n",
      "316                       30             3       Normal         125/80   \n",
      "317                       30             3       Normal         125/80   \n",
      "320                       30             3       Normal         125/80   \n",
      "323                       30             3       Normal         125/80   \n",
      "325                       30             3       Normal         125/80   \n",
      "327                       30             3       Normal         125/80   \n",
      "329                       30             3       Normal         125/80   \n",
      "330                       30             3       Normal         125/80   \n",
      "338                       30             3       Normal         125/80   \n",
      "\n",
      "     Heart Rate  Daily Steps Sleep Disorder  \n",
      "298          65         5000           None  \n",
      "299          65         5000           None  \n",
      "300          65         5000           None  \n",
      "301          65         5000           None  \n",
      "316          65         5000           None  \n",
      "317          65         5000           None  \n",
      "320          65         5000           None  \n",
      "323          65         5000           None  \n",
      "325          65         5000           None  \n",
      "327          65         5000           None  \n",
      "329          65         5000           None  \n",
      "330          65         5000           None  \n",
      "338          65         5000           None  \n"
     ]
    }
   ],
   "source": [
    "longest_sleepers = df[df['Sleep Duration'] == max_sleep_duration]\n",
    "print(longest_sleepers)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "8c1087df",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "max_sleep_duration = df['Sleep Duration'].max()\n",
    "longest_sleepers = df[df['Sleep Duration'] == max_sleep_duration]\n",
    "\n",
    "# Create a scatter graph of the longest sleepers\n",
    "plt.scatter(longest_sleepers['Age'], longest_sleepers['Sleep Duration'])\n",
    "plt.title(\"Longest Sleepers\")\n",
    "plt.xlabel(\"Age\")\n",
    "plt.ylabel(\"Sleep Duration\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "f53f5396",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The average age for the longest sleep duration is: 52.46 years\n"
     ]
    }
   ],
   "source": [
    "longest_sleepers = df[df['Sleep Duration'] == df['Sleep Duration'].max()]\n",
    "average_age = longest_sleepers['Age'].mean()\n",
    "   \n",
    "print(f\"The average age for the longest sleep duration is: {average_age:.2f} years\")\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    input_file_path = \"Sleep_health_and_lifestyle_dataset.csv\"\n",
    "    average_age_for_longest_sleep_duration(input_file_path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "e29ac98d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5.8\n"
     ]
    }
   ],
   "source": [
    "#determine the average age with the shortest sleep duration\n",
    "\n",
    "min_sleep_duration = df['Sleep Duration'].min()\n",
    "print(min_sleep_duration)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "1cd5eb23",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Person ID  Gender  Age Occupation  Sleep Duration  Quality of Sleep  \\\n",
      "80         81  Female   34  Scientist             5.8                 4   \n",
      "81         82  Female   34  Scientist             5.8                 4   \n",
      "\n",
      "    Physical Activity Level  Stress Level BMI Category Blood Pressure  \\\n",
      "80                       32             8   Overweight         131/86   \n",
      "81                       32             8   Overweight         131/86   \n",
      "\n",
      "    Heart Rate  Daily Steps Sleep Disorder  \n",
      "80          81         5200    Sleep Apnea  \n",
      "81          81         5200    Sleep Apnea  \n"
     ]
    }
   ],
   "source": [
    "shortest_sleepers = df[df['Sleep Duration'] == min_sleep_duration]\n",
    "print(shortest_sleepers)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "a5867a00",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "min_sleep_duration = df['Sleep Duration'].min()\n",
    "shortest_sleepers = df[df['Sleep Duration'] == min_sleep_duration]\n",
    "\n",
    "# Create a scatter graph of the longest sleepers\n",
    "plt.scatter(shortest_sleepers['Age'], shortest_sleepers['Sleep Duration'])\n",
    "plt.title(\"Shortest Sleepers\")\n",
    "plt.xlabel(\"Age\")\n",
    "plt.ylabel(\"Sleep Duration\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "f44b802c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The average age for the shortest sleep duration is: 34.00 years\n"
     ]
    }
   ],
   "source": [
    "shortest_sleepers = df[df['Sleep Duration'] == df['Sleep Duration'].min()]\n",
    "average_age = shortest_sleepers['Age'].mean()\n",
    "   \n",
    "print(f\"The average age for the shortest sleep duration is: {average_age:.2f} years\")\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    input_file_path = \"Sleep_health_and_lifestyle_dataset.csv\"\n",
    "  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "76a3d226",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The gender with the shortest sleep duration is: Female\n",
      "The gender with the longest sleep duration is: Female\n"
     ]
    }
   ],
   "source": [
    "# Find the shortest and longest sleep duration for each gender\n",
    "shortest_sleep_duration_by_gender = df.groupby(\"Gender\")[\"Sleep Duration\"].min()\n",
    "longest_sleep_duration_by_gender = df.groupby(\"Gender\")[\"Sleep Duration\"].max()\n",
    "\n",
    "# Print the gender with the shortest and longest sleep duration\n",
    "print(\"The gender with the shortest sleep duration is:\", shortest_sleep_duration_by_gender.idxmin())\n",
    "print(\"The gender with the longest sleep duration is:\", longest_sleep_duration_by_gender.idxmax())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "1b10af3f",
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "'Gender'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "File \u001b[1;32m~\\OneDrive\\New folder\\envs\\dev\\lib\\site-packages\\pandas\\core\\indexes\\base.py:3802\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[1;34m(self, key, method, tolerance)\u001b[0m\n\u001b[0;32m   3801\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m-> 3802\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_engine\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mcasted_key\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   3803\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n",
      "File \u001b[1;32m~\\OneDrive\\New folder\\envs\\dev\\lib\\site-packages\\pandas\\_libs\\index.pyx:138\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[1;34m()\u001b[0m\n",
      "File \u001b[1;32m~\\OneDrive\\New folder\\envs\\dev\\lib\\site-packages\\pandas\\_libs\\index.pyx:165\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[1;34m()\u001b[0m\n",
      "File \u001b[1;32mpandas\\_libs\\hashtable_class_helper.pxi:5745\u001b[0m, in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[1;34m()\u001b[0m\n",
      "File \u001b[1;32mpandas\\_libs\\hashtable_class_helper.pxi:5753\u001b[0m, in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;31mKeyError\u001b[0m: 'Gender'",
      "\nThe above exception was the direct cause of the following exception:\n",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[48], line 2\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;66;03m# Create a scatter graph \u001b[39;00m\n\u001b[1;32m----> 2\u001b[0m plt\u001b[38;5;241m.\u001b[39mbar(\u001b[43mshortest_sleep_duration_by_gender\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mGender\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m, shortest_sleep_duration_by_gender[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mSleep Duration\u001b[39m\u001b[38;5;124m'\u001b[39m])\n\u001b[0;32m      3\u001b[0m plt\u001b[38;5;241m.\u001b[39mtitle(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mShortest Sleepers by Gender\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m      4\u001b[0m plt\u001b[38;5;241m.\u001b[39mxlabel(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mGender\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "File \u001b[1;32m~\\OneDrive\\New folder\\envs\\dev\\lib\\site-packages\\pandas\\core\\series.py:981\u001b[0m, in \u001b[0;36mSeries.__getitem__\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m    978\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_values[key]\n\u001b[0;32m    980\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m key_is_scalar:\n\u001b[1;32m--> 981\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_get_value\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    983\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_hashable(key):\n\u001b[0;32m    984\u001b[0m     \u001b[38;5;66;03m# Otherwise index.get_value will raise InvalidIndexError\u001b[39;00m\n\u001b[0;32m    985\u001b[0m     \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m    986\u001b[0m         \u001b[38;5;66;03m# For labels that don't resolve as scalars like tuples and frozensets\u001b[39;00m\n",
      "File \u001b[1;32m~\\OneDrive\\New folder\\envs\\dev\\lib\\site-packages\\pandas\\core\\series.py:1089\u001b[0m, in \u001b[0;36mSeries._get_value\u001b[1;34m(self, label, takeable)\u001b[0m\n\u001b[0;32m   1086\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_values[label]\n\u001b[0;32m   1088\u001b[0m \u001b[38;5;66;03m# Similar to Index.get_value, but we do not fall back to positional\u001b[39;00m\n\u001b[1;32m-> 1089\u001b[0m loc \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mindex\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mlabel\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   1090\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mindex\u001b[38;5;241m.\u001b[39m_get_values_for_loc(\u001b[38;5;28mself\u001b[39m, loc, label)\n",
      "File \u001b[1;32m~\\OneDrive\\New folder\\envs\\dev\\lib\\site-packages\\pandas\\core\\indexes\\base.py:3804\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[1;34m(self, key, method, tolerance)\u001b[0m\n\u001b[0;32m   3802\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_engine\u001b[38;5;241m.\u001b[39mget_loc(casted_key)\n\u001b[0;32m   3803\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n\u001b[1;32m-> 3804\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(key) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01merr\u001b[39;00m\n\u001b[0;32m   3805\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m:\n\u001b[0;32m   3806\u001b[0m     \u001b[38;5;66;03m# If we have a listlike key, _check_indexing_error will raise\u001b[39;00m\n\u001b[0;32m   3807\u001b[0m     \u001b[38;5;66;03m#  InvalidIndexError. Otherwise we fall through and re-raise\u001b[39;00m\n\u001b[0;32m   3808\u001b[0m     \u001b[38;5;66;03m#  the TypeError.\u001b[39;00m\n\u001b[0;32m   3809\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_indexing_error(key)\n",
      "\u001b[1;31mKeyError\u001b[0m: 'Gender'"
     ]
    }
   ],
   "source": [
    "# Create a scatter graph \n",
    "plt.bar(shortest_sleep_duration_by_gender['Gender'], shortest_sleep_duration_by_gender['Sleep Duration'])\n",
    "plt.title(\"Shortest Sleepers by Gender\")\n",
    "plt.xlabel(\"Gender\")\n",
    "plt.ylabel(\"Sleep Duration\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "49049185",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
